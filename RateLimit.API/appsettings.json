{

  "ClientRateLimiting": {
    "QuotaExceededResponse": {
      "Content": "{{ \"Mesaj\": \"istek limiti asilmistir.\", \"Detay\": \"kota asildi. {1} basina {0} istek yapabilirsiniz. lutfen {2} saniye icerisinde tekrar deneyiniz.\" }}",
      "ContentType": "application/json",
      "StatusCode": 429
    },

    "EnableEndpointRateLimiting": true, //true dediğimiz zaman teker teker endpointlere istek limiti koyabiliriz anlamını taşır.
    "StackBlockedRequests": false, //dakikada 60 request yapılabilir dedik. saatte de 600 istek olsun dakikada 70 istek gelirse fazla olan 10 istek sayılsın dersek true sayılmasın dersek false yapmalıyız.
    //yani saatte olan istek sayısını 1 dakika içinde de doldurabilir mesela true olursa false olması uygundur.
    "RealIpHeader": "X-Real-IP",
    "ClientIdHeader": "X-ClientId",
    "HttpStatusCode": 429, //Gelen istekler başarısız olursa yani istek limiti aşıldıysa bu kod döner. 429 görürseniz rate limit olan bir yerde fazla istek yapmışsınız demektir.
    "ClientWhitelist": [ "client-1" ], //bu ıp aderesi bizde kral sınır yok demek. localimiz mesela ilk kısımda yazan IP4 verisyonu diğeri IP6 verisyonunu kasdediyor.
    "EndpointWhitelist": [ "put:/api/product" ],
    //"ClientWhitelist": [ "dev-id-1", "dev-id-2" ],
    "GeneralRules": [
      //{ //aşağıdaki kuralın anlamı tüm endpointlerimiz için 5saniye içinde 2 istek yaabilirsin demek.
      //  "Endpoint": "*", //tüm endpointlerimiz için geçerli demek
      //  "Period": "5s", //s->saniye,m->dakika,d->gün anlamını taşır
      //  "Limit": 2 //limitini söylüyor.
      //},
      { //Product Controller için 
        "Endpoint": "*:/api/product", //* dememizdeki amaç tümmetodlar için(get put delete post ) ayrı ayrı kongigürasayonlar geçerli olur.
        "Period": "40s", //s->saniye,m->dakika,d->gün anlamını taşır
        "Limit": 3 //limitini söylüyor.
      },
      { //Product için yine için oluşturduk
        "Endpoint": "*:/api/product",
        "Period": "1h",
        "Limit": 100
      },
      { //Parametre alan Product için oluşturduk
        "Endpoint": "*:/api/product/*",
        "Period": "10s",
        "Limit": 2
      },
      { //Categories için yine için oluşturduk
        "Endpoint": "*:/api/categories",
        "Period": "30s",
        "Limit": 5
      },
      { //Categories için yine için oluşturduk
        "Endpoint": "*:/api/categories",
        "Period": "1d",
        "Limit": 500
      }
    ]
  },
















  "IpRateLimiting": {
    "QuotaExceededResponse": {
      "Content": "{{ \"Mesaj\": \"istek limiti asilmistir.\", \"Detay\": \"kota asildi. {1} basina {0} istek yapabilirsiniz. lutfen {2} saniye icerisinde tekrar deneyiniz.\" }}",
      "ContentType": "application/json",
      "StatusCode": 429
    },

    "EnableEndpointRateLimiting": true, //true dediğimiz zaman teker teker endpointlere istek limiti koyabiliriz anlamını taşır.
    "StackBlockedRequests": false, //dakikada 60 request yapılabilir dedik. saatte de 600 istek olsun dakikada 70 istek gelirse fazla olan 10 istek sayılsın dersek true sayılmasın dersek false yapmalıyız.
    //yani saatte olan istek sayısını 1 dakika içinde de doldurabilir mesela true olursa false olması uygundur.
    "RealIpHeader": "X-Real-IP",
    "ClientIdHeader": "X-ClientId",
    "HttpStatusCode": 429, //Gelen istekler başarısız olursa yani istek limiti aşıldıysa bu kod döner. 429 görürseniz rate limit olan bir yerde fazla istek yapmışsınız demektir.
    "IpWhitelist": [ "127.0.0.1" ], //bu ıp aderesi bizde kral sınır yok demek. localimiz mesela ilk kısımda yazan IP4 verisyonu diğeri IP6 verisyonunu kasdediyor.
    "EndpointWhitelist": [ "put:/api/product" ],
    //"ClientWhitelist": [ "dev-id-1", "dev-id-2" ],
    "GeneralRules": [
      //{ //aşağıdaki kuralın anlamı tüm endpointlerimiz için 5saniye içinde 2 istek yaabilirsin demek.
      //  "Endpoint": "*", //tüm endpointlerimiz için geçerli demek
      //  "Period": "5s", //s->saniye,m->dakika,d->gün anlamını taşır
      //  "Limit": 2 //limitini söylüyor.
      //},
      { //Product Controller için 
        "Endpoint": "*:/api/product", //* dememizdeki amaç tümmetodlar için(get put delete post ) ayrı ayrı kongigürasayonlar geçerli olur.
        "Period": "40s", //s->saniye,m->dakika,d->gün anlamını taşır
        "Limit": 3 //limitini söylüyor.
      },
      { //Product için yine için oluşturduk
        "Endpoint": "*:/api/product",
        "Period": "1h",
        "Limit": 100
      },
      { //Parametre alan Product için oluşturduk
        "Endpoint": "*:/api/product/*",
        "Period": "10s",
        "Limit": 2
      },
      { //Categories için yine için oluşturduk
        "Endpoint": "*:/api/categories",
        "Period": "30s",
        "Limit": 5
      },
      { //Categories için yine için oluşturduk
        "Endpoint": "*:/api/categories",
        "Period": "1d",
        "Limit": 500
      }
    ]
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}

//"127.0.0.1", "::1/10", "192.168.0.0/24" local adreslerimiz.